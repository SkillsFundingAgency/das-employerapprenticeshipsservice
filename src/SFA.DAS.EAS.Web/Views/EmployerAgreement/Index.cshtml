@using SFA.DAS.Authorization
@using SFA.DAS.Authorization.Mvc
@using SFA.DAS.EAS.Infrastructure.Authorization
@using SFA.DAS.EAS.Web;
@using SFA.DAS.EAS.Web.Extensions
@using SFA.DAS.EAS.Web.ViewModels

@model OrchestratorResponse<SFA.DAS.EAS.Web.ViewModels.EmployerAgreementListViewModel>

@{
    ViewBag.PageID = "organisations-agreements-home";
    ViewBag.Title = "Organisations";
    ViewBag.Section = "organisations";
    ViewBag.GaData.Vpv = "/accounts/agreements/organisations-agreements-home";

    if (!string.IsNullOrEmpty(Model.FlashMessage?.HiddenFlashMessageInformation))
    {
        ViewBag.PageID = Model.FlashMessage.HiddenFlashMessageInformation;
    }
}

<div class="grid-row header-index">
    <div class="column-two-thirds">
        <h1 class="heading-xlarge">Your organisations and agreements</h1>
    </div>
    <div class="column-one-third">
        <form action="@Url.Action("SearchForOrganisation", "SearchOrganisation")" method="GET">
            <input class="button action-add" id="addNewOrg" type="submit" value="Add new organisation">
        </form>
    </div>
</div>
<div class="grid-row">
    <div class="column-two-thirds">
        <p>Add each organisation that will contract with your training providers.</p>
        <p>There is no restriction on the number of <a href="https://www.gov.uk/government/publications/employment-allowance-more-detailed-guidance" target="_blank" rel="external">connected organisations</a> you can add.</p>
    </div>
</div>
<div class="grid-row">
    <div class="column-two-thirds">
        <details class="transfers-status" role="group">
            <summary role="button" aria-controls="transfers-status" aria-expanded="false">
                <span class="summary">Transfers status: 
                    <span class="bold">
                        @switch (Html.GetAuthorizationResult(FeatureType.TransferConnectionRequests))
                        {
                            case AuthorizationResult.Ok:
                                @:Enabled
                                break;
                            case AuthorizationResult.FeatureAgreementNotSigned:
                                @:Disabled
                                break;
                            default:
                                throw new ArgumentOutOfRangeException();
                            }
                    </span>
                </span>
            </summary>
            <div class="text panel" id="transfers-status" aria-hidden="true">
                <p>You must sign the most up-to-date agreement for all organisations to use transfers functionality.</p>
            </div>
        </details>
    </div>
</div>
<div class="grid-row">
    <div class="column-full">
        <table class="responsive">
            <thead>
                <tr>
                    <th scope="col">Organisation</th>
                    <th scope="col">Agreement status</th>
                    <th scope="col">Action</th>
                    <th class="no-wrap" scope="col">Agreement ID</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employerAgreement in Model.Data.EmployerAgreementsData.EmployerAgreements)
                        {
                    <tr>
                        <td data-label="Organisation">@employerAgreement.LegalEntity.Name</td>
                        <td data-label="Agreement status">
                            @if (employerAgreement.HasPendingAgreement)
                            {
                                if (employerAgreement.HasSignedAgreement)
                                {
                                    @:Updated agreement available
                                }
                                else
                                {
                                    @:Agreement not signed
                                }
                            }
                            else if (employerAgreement.HasSignedAgreement)
                            {
                                @:Signed by @employerAgreement.Signed.SignedByName
                            }
                        </td>
                        <td data-label="Action">
                            @if (employerAgreement.HasPendingAgreement)
                            {
                                <a href="@Url.Action("AboutYourAgreement", "EmployerAgreement", new { agreementid = employerAgreement.Pending.HashedAgreementId })" title="View agreement for @employerAgreement.LegalEntity.Name">Sign agreement</a>
                            }
                            else if (employerAgreement.HasSignedAgreement)
                            {
                                <a href="@Url.Action("Details", "EmployerAgreement", new { agreementid = employerAgreement.Signed.HashedAgreementId })" title="View agreement">View</a>
                            }
                        </td>
                        <td data-label="Agreement ID">
                            @if (employerAgreement.HasSignedAgreement)
                            {
                                <span>@employerAgreement.LegalEntity.AccountLegalEntityPublicHashedId</span>
                            }
                            else
                            {
                                <span>Sign agreement to receive an agreement ID</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <p class="font-xsmall"><a href="@Url.Action("GetOrganisationsToRemove", "EmployerAgreement", new { Model.Data.HashedAccountId })">Remove an organisation from your account</a></p>
    </div>
</div>

@section breadcrumb {
    <div class="breadcrumbs">
        <ol role="navigation">
            <li><a href="@Url.Action("Index", "EmployerTeam", new {Model.Data.HashedAccountId})">Home</a></li>
            <li>Your organisations and agreements</li>
        </ol>
    </div>
}