@using SFA.DAS.EAS.Web
@using SFA.DAS.EAS.Web.Enums
@using SFA.DAS.EAS.Web.Extensions

@model OrchestratorResponse<SFA.DAS.EAS.Web.ViewModels.FinishEditingViewModel>

@{
    ViewBag.Title = "Finish editing";
    ViewBag.PageID = "finish-editing";
}

<div class="grid-row">
    <div class="column-two-thirds">
        <form action="@Url.Action("FinishedEditing")" method="post">
            @Html.AntiForgeryToken()
            @Html.Partial("ValidationSummary", Html.ViewData.ModelState)

            @if (Model.Data.NotReadyForApproval || !Model.Data.HasSignedTheAgreement || Model.Data.HasOverlappingErrors)
            {
                <div class="panel panel-border-wide alert-default">
                    <p class="heading-medium">You can't approve this cohort until: </p>
                    <ul class="list list-bullet">                   
                    @if (!Model.Data.HasSignedTheAgreement)
                    {
                        <li>
                            You've signed an <a href="@Url.Action("Index", "EmployerAgreement")" target="_blank">apprenticeship agreement</a> with the Education and Skills Funding Agency
                        </li>
                    }
                    @if (Model.Data.NotReadyForApproval)
                    {
                        <li>
                            All <a href="@Url.Action("Details", new { hashedAccountId = Model.Data.HashedAccountId, hashedCommitmentId = Model.Data.HashedCommitmentId })">apprentice records</a> are complete
                        </li>
                    }
                    @if (Model.Data.HasOverlappingErrors)
                    {
                        <li>
                            There are no <a href="@Url.Action("Details", new { hashedAccountId = Model.Data.HashedAccountId, hashedCommitmentId = Model.Data.HashedCommitmentId })">overlapping training dates</a> for your apprentices
                        </li>
                    }
                    </ul>
                </div>
            }

            <h1 class="heading-xlarge">Choose an option</h1>

            <fieldset>
                <legend class="visuallyhidden">Things to do next</legend>
                <div class="form-error-group form-group @Html.AddClassIfPropertyInError("SaveStatus", "error")">
                    <div>
                        @Html.ValidationMessage("SaveStatus", "Please choose an option", new { id = "error-message-SaveStatus-SendAmend" })
                    </div>
                    @if (!Model.Data.NotReadyForApproval && Model.Data.HasSignedTheAgreement && !Model.Data.HasOverlappingErrors)
                    {
                        if (Model.Data.IsApproveAndSend)
                        {
                        <label class="block-label selection-button-radio" for="@RadioButtonId(SaveStatus.ApproveAndSend)">
                            @Html.RadioButton("SaveStatus", SaveStatus.ApproveAndSend, GetRadioButtonAttributes(SaveStatus.ApproveAndSend, Model.Data.NotReadyForApproval))
                            <span id="changeTwo">Approve and send to training provider</span>
                        </label>
                        }
                        else
                        {
                        <label class="block-label selection-button-radio" for="@RadioButtonId(SaveStatus.Approve)">
                            @Html.RadioButton("SaveStatus", SaveStatus.Approve, GetRadioButtonAttributes(SaveStatus.Approve, Model.Data.NotReadyForApproval))
                            <span id="changeTwo">Approve</span>
                        </label>
                        }
                    }

                    <label class="block-label selection-button-radio" for="@RadioButtonId(SaveStatus.AmendAndSend)">
                        @Html.RadioButton("SaveStatus", SaveStatus.AmendAndSend, GetRadioButtonAttributes(SaveStatus.AmendAndSend, false))
                        <span id="changeOne">Send to training provider to review or add details</span>
                    </label>

                    <label class="block-label selection-button-radio" for="@RadioButtonId(SaveStatus.Save)">
                        @Html.RadioButton("SaveStatus", SaveStatus.Save, GetRadioButtonAttributes(SaveStatus.Save, false))
                        <span id="changeThree">Save but don't send to training provider</span>
                    </label>
                </div>

                <div>
                    <input type="submit" class="button" id="paymentPlan" value="Continue">
                    <a class="button text-link" aria-label="Cancel" href="@Url.Action("Details", new { hashedAccountId = Model.Data.HashedAccountId, hashedCommitmentId = Model.Data.HashedCommitmentId })">Cancel</a>
                </div>
                @Html.Hidden("HashedCommitmentId", Model.Data.HashedCommitmentId)
                @Html.Hidden("HasApprenticeships", Model.Data.HasApprenticeships)
                @Html.Hidden("InvalidApprenticeshipCount", Model.Data.InvalidApprenticeshipCount)
                @Html.Hidden("NotReadyForApproval", Model.Data.NotReadyForApproval)
            </fieldset>
        </form>
     
    </div>
</div>

@functions
{
    public string RadioButtonId(SaveStatus status)
    {
        return $"SaveStatus-{status}";
    }

    public Dictionary<string, object> GetRadioButtonAttributes(SaveStatus status, bool disabled)
    {
        var htmlAttributes = new Dictionary<string, object>
            {
                { "id", RadioButtonId(status) }
            };

        if (disabled)
            htmlAttributes.Add("disabled", "disabled");

        return htmlAttributes;
    }

    public string GetInvalidStateForApprovalMessage(bool hasApprenticeships, int invalidApprentieshipCount)
    {
        if (!hasApprenticeships)
            return "You need to add details for at least one apprentice before you can approve this cohort - " + Html.ActionLink("add an apprentice", "Details", new { hashedAccountId = Model.Data.HashedAccountId, hashedCommitmentId = Model.Data.HashedCommitmentId });

        var emptyLink = Html.ActionLink("go back and add details", "Details", new { hashedAccountId = Model.Data.HashedAccountId, hashedCommitmentId = Model.Data.HashedCommitmentId });

        return invalidApprentieshipCount == 1
        ? "You have 1 apprentice with incomplete details. All apprentice details must be complete before you can approve this cohort - " + emptyLink
        : $"You have {invalidApprentieshipCount} apprentices with incomplete details. All apprentice details must be complete before you can approve this cohort - " + emptyLink;
    }
}


    @section breadcrumb {
    <div class="breadcrumbs">
      <a href="@Url.Action("Index", "EmployerCommitments")" aria-label="Back to Apprentices" class="back-link">Back to Apprentices</a>
    </div>
}