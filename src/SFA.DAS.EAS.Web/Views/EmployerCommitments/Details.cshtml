@using System.Text.RegularExpressions
@using SFA.DAS.EAS.Web
@using SFA.DAS.EAS.Web.Extensions
@using SFA.DAS.EAS.Web.ViewModels

@{
    ViewBag.Title = "Add apprentices";
    ViewBag.PageID = "apprentice-details";
}

@model OrchestratorResponse<SFA.DAS.EAS.Web.ViewModels.CommitmentDetailsViewModel>
    
<div class="grid-row">
    <div class="column-full">
        <h1 class="heading-xlarge">Review your cohort</h1>
    </div>
</div>

<div class="grid-row" id="review-cohorts">
    <div class="column-one-third all-apps">
        <div>
            <h2 class="bold-xlarge">@Model.Data.Apprenticeships.Count</h2>
            <p class="heading-small">@PluraliseApprentice(Model.Data.Apprenticeships.Count)</p>
        </div>
    </div>
    <div class="column-one-third incomplete-apps">
        <div>
            <h2 class="bold-xlarge">@Model.Data.Apprenticeships.Count(x => !x.CanBeApproved)</h2>
            <p class="heading-small">@PluraliseIncompleteRecords(Model.Data.Apprenticeships.Count(x => !x.CanBeApproved))</p>
        </div>
    </div>
    <div class="column-one-third total-cost">
        <div>
            <h2 class="bold-xlarge">&pound;@Model.Data.Apprenticeships.Sum(x => x.Cost ?? 0).ToString("N0")</h2>
            <p class="heading-small">Total cost</p>
        </div>
    </div>
</div>

<div class="grid-row">
    <div class="column-one-half employer-details">
        <p><span class="strong">Training provider:</span> @Model.Data.ProviderName</p>
        <p><span class="strong">Status:</span> @Model.Data.Status.GetDescription()</p>
    </div>

       
    <div class="column-one-half employer-details">
            <p class="strong">Note:</p>
            <p>@(string.IsNullOrWhiteSpace(Model.Data.LatestMessage) ? "No note added" : Model.Data.LatestMessage)</p>
    </div>
</div>

<div class="grid-row">
    <div class="column-full">
        @{
            var finishEditingText = Model.Data.ShowApproveOnlyOption ? "Continue to approval" : "Save and continue";
        }

        <div class="grid-row">
            <div class="column-full">
                <div class="emptyStateButton">
                    <hr class="hr-top">
                    <a class="button finishEditingBtn" href="@Url.Action("FinishedEditing")" aria-label="@finishEditingText">@finishEditingText</a>
                    <a href="@Url.Action("CreateApprenticeshipEntry")" class="button button-secondary" aria-label="Add an apprentice">Add an apprentice</a>
                    
                    @*<hr class="hr-bottom">*@
                </div>
            </div>
        </div>

        @functions {

            public string GetApprenticesCountText(IList<ApprenticeshipListItemViewModel> apprenticeships)
            {
                if (apprenticeships.Count == 1)
                    return "1 Apprentice";

                return $"{apprenticeships.Count} Apprentices";
            }

            public string PluraliseApprentice(int count)
            {
                return count == 1 ? "Apprentice" : "Apprentices";
            }

            public string PluraliseIncompleteRecords(int count)
            {
                return count == 1 ? "Incomplete record" : "Incomplete records";
            }

            private string GetClickableClass(int requestsCount)
            {
                return requestsCount > 0 ? "clickable" : "";
            }
        }


        @if (!Model.Data.HasApprenticeships)
        {

            <div class="grid-row" id="empty-alert-top">
                <div class="column-full">
                    <div class="panel panel-border-wide alert-default">
                        <p>You haven't added any apprentices yet. Use the options on this page to add apprentices.</p>
                    </div>
                </div>
            </div>
        }
        else
        {

            <div class="grid-row">
                <div class="column-full">

                    @foreach (var trainingGroup in Model.Data.Apprenticeships.OrderBy(g => g.TrainingName).GroupBy(g => g.TrainingCode))
                    {
                        var groupName = String.IsNullOrEmpty(trainingGroup.Key) ? "No training course" : @trainingGroup.First().TrainingName;
                        var groupTitle = String.Format($"{trainingGroup.Count()} x {groupName}");
                        var trainingCode = String.IsNullOrEmpty(trainingGroup.Key) ? String.Empty : @trainingGroup.First().TrainingCode;

                        <div class="group-header">

                            <p class="heading-medium">@groupTitle</p>
                            @if (!String.IsNullOrEmpty(trainingCode))
                            {
                                <p>Training code: @trainingCode</p>
                            }

                        </div>

                        <table class="tableResponsive viewCommitment">
                            <thead>
                                <tr>
                                    <th scope="col">Apprentice</th>
                                    <th scope="col">Training course</th>
                                    <th scope="col">Training dates</th>
                                    <th scope="col" colspan="2">Cost</th>

                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var apprenticeship in trainingGroup.OrderBy(a => a.CanBeApproved))
                                {
                                    <tr>
                                        <td>
                                            @GetValueOrDefault(apprenticeship.ApprenticeName)
                                        </td>
                                        <td>
                                            @GetValueOrDefault(apprenticeship.TrainingName)
                                        </td>
                                        <td>
                                            @if (apprenticeship.StartDate != null && apprenticeship.EndDate != null)
                                            {
                                                <span>
                                                    @apprenticeship.StartDate.Value.ToGdsFormatWithoutDay() to @apprenticeship.EndDate.Value.ToGdsFormatWithoutDay()
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="missing">&ndash;</span>
                                            }
                                        </td>
                                        <td>
                                            @GetValueOrDefault(FormatCost(apprenticeship.Cost))
                                        </td>
                                        <td>
                                            <a href="@Url.Action("EditApprenticeship", new { hashedApprenticeshipId = apprenticeship.HashedApprenticeshipId })" aria-label="Edit @apprenticeship.ApprenticeName">Edit details</a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                    }

                </div>
            </div>

        }

    </div>
</div>

@functions
{
    public string FormatCost(decimal? cost)
    {
        if (!cost.HasValue)
            return string.Empty;

        return $"£{cost.Value:n0}";
    }
}

@helper GetValueOrDefault(string property){
    if (!string.IsNullOrEmpty(property))
    {
        <span>@property &nbsp;</span>
    }
    else
    {
        <span class="missing">@Html.Raw("&ndash;")</span>
    }
}


@section breadcrumb {
    <div class="breadcrumbs">
       <a href="@Url.Action("Index", "EmployerCommitments")" aria-label="Back to Apprentices" class="back-link">Back to Apprentices</a>
    </div>
}