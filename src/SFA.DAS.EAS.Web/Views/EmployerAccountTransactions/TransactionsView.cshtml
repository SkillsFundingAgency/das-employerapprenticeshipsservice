@using System.Globalization
@using SFA.DAS.EAS.Domain.Models.Payments
@using SFA.DAS.EAS.Domain.Models.Transaction
@using SFA.DAS.EAS.Domain.Models.Transfers
@using SFA.DAS.EAS.Web.Extensions
@model SFA.DAS.EAS.Web.OrchestratorResponse<SFA.DAS.EAS.Web.ViewModels.TransactionViewResultViewModel>
@{
    var culture = new CultureInfo("en-GB");
}
@{ViewBag.PageID = "page-transactions"; }
@{ViewBag.Section = "finance"; }
@{ViewBag.Title = "Your transactions";}

@{
    var displayingMonthDate = new DateTime(Model.Data.Year, Model.Data.Month, 1);
    var previousMonthDate = displayingMonthDate.AddMonths(-1);
    var nextMonthDate = displayingMonthDate.AddMonths(1);
}

@{
    ViewBag.GaData.Vpv = "/accounts/balance/" + Model.Data.Year + "/" + Model.Data.Month + "/page-transactions";
}

<div class="grid-row">
    <div class="column-full">
        <h1 class="heading-xlarge">
            Your transactions
            <span class="heading-secondary">@displayingMonthDate.ToGdsFormatWithoutDay()</span>
        </h1>

        @if (Model.Data.IsLatestMonth)
        {
            <div class="data-wrap">
                <div class="data">
                    <dl>
                        <dt>Current funds</dt>
                        @{
                            var balance = Model.Data.Model.CurrentBalance.ToString("C0", culture);
                            var balanceClass = string.Empty;

                            if (balance.Length > 8)
                            {
                                balanceClass = "long";
                            }
                            if (balance.Length > 10)
                            {
                                balanceClass = "longer";
                            }

                        }
                        <dd class="@balanceClass">@balance</dd>
                    </dl>
                </div>
            </div>
        }
    </div>
</div>
<div class="grid-row">
    <div class="column-full">

        @if (Model.Data.Model.Data.TransactionLines.All(c => c.TransactionType == TransactionItemType.Unknown))
        {
            <p class="panel panel-info">
                @if (Model.Data.IsLatestMonth)
                {
                    <span>No transactions yet.</span>
                }
                else
                {
                    <span>No transactions.</span>
                }
            </p>
            if (!Model.Data.AccountHasPreviousTransactions)
            {

                <details>
                    <summary><span class="summary">Why can't I see my levy funds?</span></summary>
                    <div class="panel panel-info">
                        <p><b>Make sure you’re logged into the correct account and the correct PAYE schemes are added to the account.</b></p>
                        <p><b>If you declare after 19 July, we ignore your declaration and levy funds will not credit your account this month. You can claim your July funds next month by resubmitting your levy figures for July in your August declaration.</b></p>
                    </div>
                </details>
            }
        }
        else
        {
            <table>
                <thead>
                    <tr>
                        <th scope="col"><span class="no-wrap">Payment date</span></th>
                        <th scope="col" class="mobile-hide-cell">Description</th>
                        <th scope="col" class="numeric">Amount</th>
                        <th scope="col"><span class="vh">Action</span></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var aggregationLine in Model.Data.Model.Data.TransactionLines)
                    {
                        var fromDate = aggregationLine.DateCreated.Date;
                        var toDate = new DateTime(aggregationLine.DateCreated.Year, aggregationLine.DateCreated.Month, aggregationLine.DateCreated.Day, 23, 59, 59);

                        <tr>
                            <td>
                                <span class="no-wrap">@{var date = aggregationLine.DateCreated.ToGdsFormat();} @date </span>
                            </td>
                            <td class="mobile-hide-cell">
                                <span class="description">
                                    @aggregationLine.Description
                                </span>
                            </td>

                            @{
                                var transactionAmount = aggregationLine.Amount;

                                if (aggregationLine.TransactionType == TransactionItemType.Payment)
                                {
                                    var paymentTransaction = aggregationLine as PaymentTransactionLine;

                                    if (paymentTransaction != null)
                                    {
                                        transactionAmount += paymentTransaction.EmployerCoInvestmentAmount +
                                                 paymentTransaction.SfaCoInvestmentAmount;
                                    }
                                }
                            }

                            <td class="numeric"> <span class="no-wrap"> @(transactionAmount.ToString("C2", culture)) </span> </td>

                            <td class="link-right">
                                @if (aggregationLine.TransactionType == TransactionItemType.Declaration ||
                                     aggregationLine.TransactionType == TransactionItemType.TopUp)
                                {
                                    <a title="View details for the transaction on @date" href="@Url.Action("LevyDeclarationDetail", "EmployerAccountTransactions", new {HashedAccountId = Model.Data.Model.Data.HashedAccountId, fromDate, toDate})">
                                        Details <span class="vh"> for the transaction on @date</span>
                                    </a>
                                }
                                else if (aggregationLine.TransactionType == TransactionItemType.Payment)
                                {
                                    var paymentTransaction = aggregationLine as PaymentTransactionLine;

                                    <a title="View details for the transaction on @date" href="@Url.Action("ProviderPaymentSummary", "EmployerAccountTransactions", new {HashedAccountId = Model.Data.Model.Data.HashedAccountId, ukPrn = paymentTransaction?.UkPrn, fromDate = fromDate, toDate = toDate })">
                                        Details <span class="vh"> for the transaction on @date</span>

                                    </a>
                                }
                                else if (aggregationLine.TransactionType == TransactionItemType.Transfer)
                                {
                                    var transferTransaction = aggregationLine as TransferTransactionLine;

                                    var targetAccountPublicHashedId =
                                        Model.Data.PublicHashedAccountId.Equals(transferTransaction?.SenderAccountPublicHashedId, 
                                            StringComparison.CurrentCultureIgnoreCase) ?
                                            transferTransaction?.SenderAccountPublicHashedId :
                                            transferTransaction?.ReceiverAccountPublicHashedId;

                                        <a title="View details for the transfer transaction on @date"
                                           href="@Url.Action("TransferDetail", "EmployerAccountTransactions",
                                                     new
                                                     {
                                                         HashedAccountId = Model.Data.Model.Data.HashedAccountId,
                                                         TargetAccountId = targetAccountPublicHashedId,
                                                         PeriodEnd = transferTransaction?.PeriodEnd
                                                     })">
                                            Details <span class="vh"> for the transfer transaction on @date</span>
                                        </a>
                                    
                                }

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <ul class="previous-next-navigation">
            @if (!Model.Data.IsFirstMonthOfLevy && Model.Data.AccountHasPreviousTransactions)
            {
                <li class="previous">
                    <a href="@Url.Action("TransactionsView", new {year = @previousMonthDate.Year, month=@previousMonthDate.Month})">
                        Previous <span class="hide-mobile">month</span>
                        <span class="detail">@previousMonthDate.ToGdsFormatWithoutDay()</span>
                    </a>
                </li>
            }
            @if (!Model.Data.IsLatestMonth)
            {
                <li class="next">
                    <a href="@Url.Action("TransactionsView", new {year = @nextMonthDate.Year, month=@nextMonthDate.Month})">
                        Next month
                        <span class="detail">@nextMonthDate.ToGdsFormatWithoutDay()</span>

                    </a>
                </li>
            }
        </ul>

        <details class="feedback">
            <summary><span class="summary">Help us improve this section</span></summary>
            <div class="survey">
                <script id="ss-embed-396029">
                    (function (d, w) {
                        var s, ss; ss = d.createElement('script');
                        ss.type = 'text/javascript';
                        ss.async = true;
                        ss.src = ('https:' == d.location.protocol ? 'https://' : 'http://') + 'www.smartsurvey.co.uk/s/r/embed.aspx?i=350750&c=396029';
                        s = d.getElementsByTagName('script')[0];
                        s.parentNode.insertBefore(ss, s);
                    })(document, window);
                </script>
            </div>
        </details>


    </div>
</div>
@section breadcrumb {
    <div class="breadcrumbs">
        <ol role="navigation">
            <li><a href="@Url.Action("Index", "EmployerTeam", new {HashedAccountId = Model.Data.Model.Data.HashedAccountId})">Home</a></li>
            <li><a href="@Url.Action("Index", "EmployerAccountTransactions", new {HashedAccountId = Model.Data.Model.Data.HashedAccountId})">Finance</a></li>
            <li>@ViewBag.Title</li>
        </ol>
    </div>
}

@section pageSpecificJS{
    <script language="javascript" type="text/javascript" src="~/bundles/modernizr"></script>

    <script language="javascript" type="text/javascript">
        (function () {
            if (!Modernizr.details) {
                //the details element is not supported in the browser (typically IE and edge) so we add some event hooks to give similar behaviour
                $("details").each(function (index, element) {
                    $("summary", element).on('click',
                        function () {
                            var headingElement = $(this);
                            $(this).siblings("div").toggle("fast", function () {
                                var arrowElement = $('span.arrow', headingElement);
                                if ($('span.arrow', headingElement).length === 0) {
                                    arrowElement = $("<span />").addClass('arrow arrowExpanded');
                                    headingElement.prepend(arrowElement);
                                } else {
                                    if (arrowElement.hasClass('arrowCollapsed')) {
                                        arrowElement.removeClass('arrowCollapsed').addClass('arrowExpanded');
                                    } else {
                                        arrowElement.removeClass('arrowExpanded').addClass('arrowCollapsed');
                                    }
                                }
                            });
                        });

                    $("summary", element).each(function (index, element) {
                        var headingElement = $(this);
                        $(this).siblings("div").hide("fast", function () {
                            var arrowElement = $("<span />").addClass('arrow arrowCollapsed');
                            headingElement.prepend(arrowElement);
                        });
                    });
                });
            }
        })();
    </script>
}